# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ibGUGGGUmXAFuIjTxy11vfPhhrFFHe2S
"""

import numpy as np

class AntColonyGraphColoring:
    def __init__(self, graph, num_colors, num_ants, num_iterations, alpha, beta, rho, Q):
        self.graph = graph
        self.num_nodes = graph.shape[0]
        self.num_colors = num_colors
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.rho = rho
        self.Q = Q

        self.pheromone = np.ones((self.num_nodes, self.num_colors)) * 0.1
        self.best_solution = None
        self.best_conflicts = float('inf')
        self.best_colors_used = self.num_colors + 1

    def run(self):
        print("Starting Ant Colony Optimization for Graph Coloring\n")
        print(f"{'Iter':<6}{'Best Conflicts':<15}{'Colors Used':<12}")
        print("-" * 33)

        for iteration in range(1, self.num_iterations + 1):
            solutions = []
            for _ in range(self.num_ants):
                solution = self.construct_solution()
                conflicts = self.evaluate(solution)
                colors_used = len(set(solution))

                if conflicts < self.best_conflicts or (conflicts == self.best_conflicts and colors_used < self.best_colors_used):
                    self.best_conflicts = conflicts
                    self.best_solution = solution
                    self.best_colors_used = colors_used

                solutions.append((solution, conflicts))
            self.update_pheromones(solutions)

            print(f"{iteration:<6}{self.best_conflicts:<15}{self.best_colors_used:<12}")

            if self.best_conflicts == 0:
                print("\nConflict-free coloring found early!\n")
                break

        return self.best_solution, self.best_conflicts, self.best_colors_used

    def construct_solution(self):
        solution = [-1] * self.num_nodes
        for node in range(self.num_nodes):
            probabilities = self.calculate_probabilities(node, solution)
            color = np.random.choice(self.num_colors, p=probabilities)
            solution[node] = color
        return solution

    def calculate_probabilities(self, node, partial_solution):
        pheromone = self.pheromone[node] ** self.alpha
        heuristic = np.zeros(self.num_colors)
        for color in range(self.num_colors):
            conflicts = 0
            for neighbor in range(self.num_nodes):
                if self.graph[node][neighbor] == 1 and neighbor < node:
                    if partial_solution[neighbor] == color:
                        conflicts += 1
            heuristic[color] = 1.0 / (1 + conflicts)
        heuristic = heuristic ** self.beta
        prob = pheromone * heuristic
        total = prob.sum()
        if total == 0:
            prob = np.ones(self.num_colors) / self.num_colors
        else:
            prob /= total
        return prob

    def evaluate(self, solution):
        conflicts = 0
        for i in range(self.num_nodes):
            for j in range(i + 1, self.num_nodes):
                if self.graph[i][j] == 1 and solution[i] == solution[j]:
                    conflicts += 1
        return conflicts

    def update_pheromones(self, solutions):
        self.pheromone *= (1 - self.rho)
        for solution, conflicts in solutions:
            delta = self.Q if conflicts == 0 else self.Q / (conflicts + 1)
            for node, color in enumerate(solution):
                self.pheromone[node][color] += delta


def print_coloring_solution(solution):
    print("\nFinal Coloring Assignment:")
    for node, color in enumerate(solution):
        print(f"  Node {node} -> Color {color}")
    print()

# Example usage:
if __name__ == "__main__":
    graph = np.array([
        [0, 1, 1, 0, 0],
        [1, 0, 1, 1, 0],
        [1, 1, 0, 1, 1],
        [0, 1, 1, 0, 1],
        [0, 0, 1, 1, 0]
    ])

    num_colors = 3
    aco = AntColonyGraphColoring(
        graph=graph,
        num_colors=num_colors,
        num_ants=20,
        num_iterations=100,
        alpha=1,
        beta=2,
        rho=0.1,
        Q=10
    )

    best_solution, conflicts, colors_used = aco.run()

    print("-" * 40)
    print("Summary of Best Solution:")
    print(f"Total Conflicts  : {conflicts}")
    print(f"Colors Used      : {colors_used}")
    print_coloring_solution(best_solution)